# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Install node
      uses: actions/setup-node@v3
        
    - name: Install vpk
      run: dotnet tool install -g vpk
      
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: 6.0.*
    
    - name: Install conventional-changelog
      run: npm install -g conventional-changelog-cli

    - name: Determine Version
      id: version
      uses: gittools/actions/gitversion/execute@v3.1.11
      with:
        useConfigFile: true
        configFilePath: ./.github/GitVersion.yml
      
    - name: Restore
      run: dotnet restore -p:IsLocal=false
      
    - name: Build
      run: dotnet build -c Release --no-restore -p:IsLocal=false -p:Version=${{ steps.version.outputs.AssemblySemVer }} -p:PackageVersion=${{ steps.version.outputs.SemVer }}

    - name: Unit Test
      run: dotnet test --no-build --verbosity normal --configuration Release -p:IsLocal=false
      
    - name: Build
      run: dotnet publish ./SudokuWriter.Gui/ -c Release --no-build -r win-x64 -o ./.out/publish

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.CODE_SIGN_PFX }}")
        [IO.File]::WriteAllBytes('${{ github.workspace }}\GitHubActionsWorkflow.pfx', $pfx_cert_byte)
    
    - name: Tag the commit
      run: |
        git config --global user.email "no-reply@vaettir.net"
        git config --global user.name "Tagger"
        git tag -a v${{ steps.version.outputs.SemVer }} -m "Version ${{ steps.version.outputs.SemVer }}"
        git push --follow-tags
        
    - name: Generate release notes
      run: |
        md ./.out/tmp | Out-Null
        ConvertTo-Json @{title="Sudoku Writer"; version="${{ steps.version.outputs.SemVer }}"} | Out-File ./.out/tmp/conventional-changelog.json
        conventional-changelog --preset conventionalcommits --outfile ./.out/tmp/release-notes.md --context ./.out/tmp/conventional-changelog.json
  
    - name: Pack Velopack Release
      run: |
        vpk download github --repoUrl ${{ github.server_url }}/${{ github.repository }}
        vpk pack `
          -u VaettirNet.SudokuWriter `
          -v ${{ steps.version.outputs.SemVer }} `
          -p ./.out/publish `
          -o ./.out/releases `
          --framework net9.0-x64-desktop `
          --mainExe "VnSudoku.exe" `
          --icon "./SudokuWriter.Gui/Resources/SudokuWriter.ico" `
          --packTitle "Sudoku Writer" `
          --packAuthors Vaettir.Net `
          --releaseNotes ${{ github.workspace }}\.out\tmp\release-notes.md `
          --shortcuts StartMenu `
          --signParams "/td sha256 /fd sha256 /f ${{ github.workspace }}\GitHubActionsWorkflow.pfx /tr http://freetsa.org/tsr"

    - name: Upload Velopack Release
      run: |
        vpk upload github `
          --repoUrl ${{ github.server_url }}/${{ github.repository }} `
          -o ./.out/releases `
          --publish `
          --releaseName "Sudoku Writer ${{ steps.version.outputs.SemVer }}" `
          --tag v${{ steps.version.outputs.SemVer }} `
          --token ${{ secrets.GITHUB_TOKEN }}

    - name: Sign GitHub release
      run: |
        dotnet run `
        --project ./BuildTools/BuildTools.csproj `
        -c Release `
        --no-build `
        -- `
        gh release sign `
        --repository ${{ github.repository }} `
        --tag v${{ steps.version.outputs.SemVer }} `
        --key ${{ github.workspace }}\GitHubActionsWorkflow.pfx `
        --verbose `
        --console-log
      env:
        GITHUB_ACCESSTOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tmp
        path: |
          .out/tmp
        retention-days: 1